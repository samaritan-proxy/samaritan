// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/samaritan-proxy/samaritan/pb/api (interfaces: DiscoveryServiceClient,DiscoveryService_StreamDependenciesClient,DiscoveryService_StreamSvcConfigsClient,DiscoveryService_StreamSvcEndpointsClient)

// Package config is a generated GoMock package.
package config

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "github.com/samaritan-proxy/samaritan/pb/api"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockDiscoveryServiceClient is a mock of DiscoveryServiceClient interface
type MockDiscoveryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryServiceClientMockRecorder
}

// MockDiscoveryServiceClientMockRecorder is the mock recorder for MockDiscoveryServiceClient
type MockDiscoveryServiceClientMockRecorder struct {
	mock *MockDiscoveryServiceClient
}

// NewMockDiscoveryServiceClient creates a new mock instance
func NewMockDiscoveryServiceClient(ctrl *gomock.Controller) *MockDiscoveryServiceClient {
	mock := &MockDiscoveryServiceClient{ctrl: ctrl}
	mock.recorder = &MockDiscoveryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryServiceClient) EXPECT() *MockDiscoveryServiceClientMockRecorder {
	return m.recorder
}

// StreamDependencies mocks base method
func (m *MockDiscoveryServiceClient) StreamDependencies(arg0 context.Context, arg1 *api.DependencyDiscoveryRequest, arg2 ...grpc.CallOption) (api.DiscoveryService_StreamDependenciesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamDependencies", varargs...)
	ret0, _ := ret[0].(api.DiscoveryService_StreamDependenciesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamDependencies indicates an expected call of StreamDependencies
func (mr *MockDiscoveryServiceClientMockRecorder) StreamDependencies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamDependencies", reflect.TypeOf((*MockDiscoveryServiceClient)(nil).StreamDependencies), varargs...)
}

// StreamSvcConfigs mocks base method
func (m *MockDiscoveryServiceClient) StreamSvcConfigs(arg0 context.Context, arg1 ...grpc.CallOption) (api.DiscoveryService_StreamSvcConfigsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamSvcConfigs", varargs...)
	ret0, _ := ret[0].(api.DiscoveryService_StreamSvcConfigsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamSvcConfigs indicates an expected call of StreamSvcConfigs
func (mr *MockDiscoveryServiceClientMockRecorder) StreamSvcConfigs(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamSvcConfigs", reflect.TypeOf((*MockDiscoveryServiceClient)(nil).StreamSvcConfigs), varargs...)
}

// StreamSvcEndpoints mocks base method
func (m *MockDiscoveryServiceClient) StreamSvcEndpoints(arg0 context.Context, arg1 ...grpc.CallOption) (api.DiscoveryService_StreamSvcEndpointsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamSvcEndpoints", varargs...)
	ret0, _ := ret[0].(api.DiscoveryService_StreamSvcEndpointsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamSvcEndpoints indicates an expected call of StreamSvcEndpoints
func (mr *MockDiscoveryServiceClientMockRecorder) StreamSvcEndpoints(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamSvcEndpoints", reflect.TypeOf((*MockDiscoveryServiceClient)(nil).StreamSvcEndpoints), varargs...)
}

// MockDiscoveryService_StreamDependenciesClient is a mock of DiscoveryService_StreamDependenciesClient interface
type MockDiscoveryService_StreamDependenciesClient struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryService_StreamDependenciesClientMockRecorder
}

// MockDiscoveryService_StreamDependenciesClientMockRecorder is the mock recorder for MockDiscoveryService_StreamDependenciesClient
type MockDiscoveryService_StreamDependenciesClientMockRecorder struct {
	mock *MockDiscoveryService_StreamDependenciesClient
}

// NewMockDiscoveryService_StreamDependenciesClient creates a new mock instance
func NewMockDiscoveryService_StreamDependenciesClient(ctrl *gomock.Controller) *MockDiscoveryService_StreamDependenciesClient {
	mock := &MockDiscoveryService_StreamDependenciesClient{ctrl: ctrl}
	mock.recorder = &MockDiscoveryService_StreamDependenciesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryService_StreamDependenciesClient) EXPECT() *MockDiscoveryService_StreamDependenciesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockDiscoveryService_StreamDependenciesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockDiscoveryService_StreamDependenciesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDiscoveryService_StreamDependenciesClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockDiscoveryService_StreamDependenciesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDiscoveryService_StreamDependenciesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDiscoveryService_StreamDependenciesClient)(nil).Context))
}

// Header mocks base method
func (m *MockDiscoveryService_StreamDependenciesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockDiscoveryService_StreamDependenciesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDiscoveryService_StreamDependenciesClient)(nil).Header))
}

// Recv mocks base method
func (m *MockDiscoveryService_StreamDependenciesClient) Recv() (*api.DependencyDiscoveryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*api.DependencyDiscoveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockDiscoveryService_StreamDependenciesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDiscoveryService_StreamDependenciesClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockDiscoveryService_StreamDependenciesClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockDiscoveryService_StreamDependenciesClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDiscoveryService_StreamDependenciesClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockDiscoveryService_StreamDependenciesClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockDiscoveryService_StreamDependenciesClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDiscoveryService_StreamDependenciesClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockDiscoveryService_StreamDependenciesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockDiscoveryService_StreamDependenciesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDiscoveryService_StreamDependenciesClient)(nil).Trailer))
}

// MockDiscoveryService_StreamSvcConfigsClient is a mock of DiscoveryService_StreamSvcConfigsClient interface
type MockDiscoveryService_StreamSvcConfigsClient struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryService_StreamSvcConfigsClientMockRecorder
}

// MockDiscoveryService_StreamSvcConfigsClientMockRecorder is the mock recorder for MockDiscoveryService_StreamSvcConfigsClient
type MockDiscoveryService_StreamSvcConfigsClientMockRecorder struct {
	mock *MockDiscoveryService_StreamSvcConfigsClient
}

// NewMockDiscoveryService_StreamSvcConfigsClient creates a new mock instance
func NewMockDiscoveryService_StreamSvcConfigsClient(ctrl *gomock.Controller) *MockDiscoveryService_StreamSvcConfigsClient {
	mock := &MockDiscoveryService_StreamSvcConfigsClient{ctrl: ctrl}
	mock.recorder = &MockDiscoveryService_StreamSvcConfigsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryService_StreamSvcConfigsClient) EXPECT() *MockDiscoveryService_StreamSvcConfigsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockDiscoveryService_StreamSvcConfigsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDiscoveryService_StreamSvcConfigsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsClient)(nil).Context))
}

// Header mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockDiscoveryService_StreamSvcConfigsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsClient)(nil).Header))
}

// Recv mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsClient) Recv() (*api.SvcConfigDiscoveryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*api.SvcConfigDiscoveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockDiscoveryService_StreamSvcConfigsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockDiscoveryService_StreamSvcConfigsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsClient) Send(arg0 *api.SvcConfigDiscoveryRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockDiscoveryService_StreamSvcConfigsClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockDiscoveryService_StreamSvcConfigsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockDiscoveryService_StreamSvcConfigsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsClient)(nil).Trailer))
}

// MockDiscoveryService_StreamSvcEndpointsClient is a mock of DiscoveryService_StreamSvcEndpointsClient interface
type MockDiscoveryService_StreamSvcEndpointsClient struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryService_StreamSvcEndpointsClientMockRecorder
}

// MockDiscoveryService_StreamSvcEndpointsClientMockRecorder is the mock recorder for MockDiscoveryService_StreamSvcEndpointsClient
type MockDiscoveryService_StreamSvcEndpointsClientMockRecorder struct {
	mock *MockDiscoveryService_StreamSvcEndpointsClient
}

// NewMockDiscoveryService_StreamSvcEndpointsClient creates a new mock instance
func NewMockDiscoveryService_StreamSvcEndpointsClient(ctrl *gomock.Controller) *MockDiscoveryService_StreamSvcEndpointsClient {
	mock := &MockDiscoveryService_StreamSvcEndpointsClient{ctrl: ctrl}
	mock.recorder = &MockDiscoveryService_StreamSvcEndpointsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryService_StreamSvcEndpointsClient) EXPECT() *MockDiscoveryService_StreamSvcEndpointsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockDiscoveryService_StreamSvcEndpointsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockDiscoveryService_StreamSvcEndpointsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDiscoveryService_StreamSvcEndpointsClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockDiscoveryService_StreamSvcEndpointsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDiscoveryService_StreamSvcEndpointsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDiscoveryService_StreamSvcEndpointsClient)(nil).Context))
}

// Header mocks base method
func (m *MockDiscoveryService_StreamSvcEndpointsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockDiscoveryService_StreamSvcEndpointsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDiscoveryService_StreamSvcEndpointsClient)(nil).Header))
}

// Recv mocks base method
func (m *MockDiscoveryService_StreamSvcEndpointsClient) Recv() (*api.SvcEndpointDiscoveryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*api.SvcEndpointDiscoveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockDiscoveryService_StreamSvcEndpointsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDiscoveryService_StreamSvcEndpointsClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockDiscoveryService_StreamSvcEndpointsClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockDiscoveryService_StreamSvcEndpointsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDiscoveryService_StreamSvcEndpointsClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockDiscoveryService_StreamSvcEndpointsClient) Send(arg0 *api.SvcEndpointDiscoveryRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockDiscoveryService_StreamSvcEndpointsClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDiscoveryService_StreamSvcEndpointsClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockDiscoveryService_StreamSvcEndpointsClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockDiscoveryService_StreamSvcEndpointsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDiscoveryService_StreamSvcEndpointsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockDiscoveryService_StreamSvcEndpointsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockDiscoveryService_StreamSvcEndpointsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDiscoveryService_StreamSvcEndpointsClient)(nil).Trailer))
}

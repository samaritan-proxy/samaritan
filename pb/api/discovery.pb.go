// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/discovery.proto

package api

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	common "github.com/samaritan-proxy/samaritan/pb/common"
	service "github.com/samaritan-proxy/samaritan/pb/config/service"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SvcDiscoveryRequest struct {
	// Meta information of the current instance.
	Instance             *common.Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SvcDiscoveryRequest) Reset()         { *m = SvcDiscoveryRequest{} }
func (m *SvcDiscoveryRequest) String() string { return proto.CompactTextString(m) }
func (*SvcDiscoveryRequest) ProtoMessage()    {}
func (*SvcDiscoveryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ea7b57a526124c9, []int{0}
}
func (m *SvcDiscoveryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcDiscoveryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcDiscoveryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcDiscoveryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcDiscoveryRequest.Merge(m, src)
}
func (m *SvcDiscoveryRequest) XXX_Size() int {
	return m.Size()
}
func (m *SvcDiscoveryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcDiscoveryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SvcDiscoveryRequest proto.InternalMessageInfo

func (m *SvcDiscoveryRequest) GetInstance() *common.Instance {
	if m != nil {
		return m.Instance
	}
	return nil
}

type SvcDiscoveryResponse struct {
	// Added service.
	Added []*service.Service `protobuf:"bytes,1,rep,name=added,proto3" json:"added,omitempty"`
	// Removed service.
	Removed              []*service.Service `protobuf:"bytes,2,rep,name=removed,proto3" json:"removed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SvcDiscoveryResponse) Reset()         { *m = SvcDiscoveryResponse{} }
func (m *SvcDiscoveryResponse) String() string { return proto.CompactTextString(m) }
func (*SvcDiscoveryResponse) ProtoMessage()    {}
func (*SvcDiscoveryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ea7b57a526124c9, []int{1}
}
func (m *SvcDiscoveryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcDiscoveryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcDiscoveryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcDiscoveryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcDiscoveryResponse.Merge(m, src)
}
func (m *SvcDiscoveryResponse) XXX_Size() int {
	return m.Size()
}
func (m *SvcDiscoveryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcDiscoveryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SvcDiscoveryResponse proto.InternalMessageInfo

func (m *SvcDiscoveryResponse) GetAdded() []*service.Service {
	if m != nil {
		return m.Added
	}
	return nil
}

func (m *SvcDiscoveryResponse) GetRemoved() []*service.Service {
	if m != nil {
		return m.Removed
	}
	return nil
}

type SvcConfigDiscoveryRequest struct {
	// All service names that need to subscribe.
	SvcNamesSubscribe []string `protobuf:"bytes,1,rep,name=svc_names_subscribe,json=svcNamesSubscribe,proto3" json:"svc_names_subscribe,omitempty"`
	// All service names that need to unsubscribe.
	SvcNamesUnsubscribe  []string `protobuf:"bytes,2,rep,name=svc_names_unsubscribe,json=svcNamesUnsubscribe,proto3" json:"svc_names_unsubscribe,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SvcConfigDiscoveryRequest) Reset()         { *m = SvcConfigDiscoveryRequest{} }
func (m *SvcConfigDiscoveryRequest) String() string { return proto.CompactTextString(m) }
func (*SvcConfigDiscoveryRequest) ProtoMessage()    {}
func (*SvcConfigDiscoveryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ea7b57a526124c9, []int{2}
}
func (m *SvcConfigDiscoveryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcConfigDiscoveryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcConfigDiscoveryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcConfigDiscoveryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcConfigDiscoveryRequest.Merge(m, src)
}
func (m *SvcConfigDiscoveryRequest) XXX_Size() int {
	return m.Size()
}
func (m *SvcConfigDiscoveryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcConfigDiscoveryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SvcConfigDiscoveryRequest proto.InternalMessageInfo

func (m *SvcConfigDiscoveryRequest) GetSvcNamesSubscribe() []string {
	if m != nil {
		return m.SvcNamesSubscribe
	}
	return nil
}

func (m *SvcConfigDiscoveryRequest) GetSvcNamesUnsubscribe() []string {
	if m != nil {
		return m.SvcNamesUnsubscribe
	}
	return nil
}

type SvcConfigDiscoveryResponse struct {
	// Update of configuration.
	Updated              map[string]*service.Config `protobuf:"bytes,1,rep,name=updated,proto3" json:"updated,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SvcConfigDiscoveryResponse) Reset()         { *m = SvcConfigDiscoveryResponse{} }
func (m *SvcConfigDiscoveryResponse) String() string { return proto.CompactTextString(m) }
func (*SvcConfigDiscoveryResponse) ProtoMessage()    {}
func (*SvcConfigDiscoveryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ea7b57a526124c9, []int{3}
}
func (m *SvcConfigDiscoveryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcConfigDiscoveryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcConfigDiscoveryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcConfigDiscoveryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcConfigDiscoveryResponse.Merge(m, src)
}
func (m *SvcConfigDiscoveryResponse) XXX_Size() int {
	return m.Size()
}
func (m *SvcConfigDiscoveryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcConfigDiscoveryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SvcConfigDiscoveryResponse proto.InternalMessageInfo

func (m *SvcConfigDiscoveryResponse) GetUpdated() map[string]*service.Config {
	if m != nil {
		return m.Updated
	}
	return nil
}

type SvcEndpointDiscoveryRequest struct {
	// All service names that need to subscribe.
	SvcNamesSubscribe []string `protobuf:"bytes,1,rep,name=svc_names_subscribe,json=svcNamesSubscribe,proto3" json:"svc_names_subscribe,omitempty"`
	// All service names that need to unsubscribe.
	SvcNamesUnsubscribe  []string `protobuf:"bytes,2,rep,name=svc_names_unsubscribe,json=svcNamesUnsubscribe,proto3" json:"svc_names_unsubscribe,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SvcEndpointDiscoveryRequest) Reset()         { *m = SvcEndpointDiscoveryRequest{} }
func (m *SvcEndpointDiscoveryRequest) String() string { return proto.CompactTextString(m) }
func (*SvcEndpointDiscoveryRequest) ProtoMessage()    {}
func (*SvcEndpointDiscoveryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ea7b57a526124c9, []int{4}
}
func (m *SvcEndpointDiscoveryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcEndpointDiscoveryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcEndpointDiscoveryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcEndpointDiscoveryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcEndpointDiscoveryRequest.Merge(m, src)
}
func (m *SvcEndpointDiscoveryRequest) XXX_Size() int {
	return m.Size()
}
func (m *SvcEndpointDiscoveryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcEndpointDiscoveryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SvcEndpointDiscoveryRequest proto.InternalMessageInfo

func (m *SvcEndpointDiscoveryRequest) GetSvcNamesSubscribe() []string {
	if m != nil {
		return m.SvcNamesSubscribe
	}
	return nil
}

func (m *SvcEndpointDiscoveryRequest) GetSvcNamesUnsubscribe() []string {
	if m != nil {
		return m.SvcNamesUnsubscribe
	}
	return nil
}

type SvcEndpointDiscoveryResponse struct {
	// Name of service which endpoints had updated.
	SvcName string `protobuf:"bytes,1,opt,name=svc_name,json=svcName,proto3" json:"svc_name,omitempty"`
	// Added endpoints.
	Added []*service.Endpoint `protobuf:"bytes,2,rep,name=added,proto3" json:"added,omitempty"`
	// Removed endpoints.
	Removed              []*service.Endpoint `protobuf:"bytes,3,rep,name=removed,proto3" json:"removed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SvcEndpointDiscoveryResponse) Reset()         { *m = SvcEndpointDiscoveryResponse{} }
func (m *SvcEndpointDiscoveryResponse) String() string { return proto.CompactTextString(m) }
func (*SvcEndpointDiscoveryResponse) ProtoMessage()    {}
func (*SvcEndpointDiscoveryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ea7b57a526124c9, []int{5}
}
func (m *SvcEndpointDiscoveryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcEndpointDiscoveryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcEndpointDiscoveryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcEndpointDiscoveryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcEndpointDiscoveryResponse.Merge(m, src)
}
func (m *SvcEndpointDiscoveryResponse) XXX_Size() int {
	return m.Size()
}
func (m *SvcEndpointDiscoveryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcEndpointDiscoveryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SvcEndpointDiscoveryResponse proto.InternalMessageInfo

func (m *SvcEndpointDiscoveryResponse) GetSvcName() string {
	if m != nil {
		return m.SvcName
	}
	return ""
}

func (m *SvcEndpointDiscoveryResponse) GetAdded() []*service.Endpoint {
	if m != nil {
		return m.Added
	}
	return nil
}

func (m *SvcEndpointDiscoveryResponse) GetRemoved() []*service.Endpoint {
	if m != nil {
		return m.Removed
	}
	return nil
}

func init() {
	proto.RegisterType((*SvcDiscoveryRequest)(nil), "api.SvcDiscoveryRequest")
	proto.RegisterType((*SvcDiscoveryResponse)(nil), "api.SvcDiscoveryResponse")
	proto.RegisterType((*SvcConfigDiscoveryRequest)(nil), "api.SvcConfigDiscoveryRequest")
	proto.RegisterType((*SvcConfigDiscoveryResponse)(nil), "api.SvcConfigDiscoveryResponse")
	proto.RegisterMapType((map[string]*service.Config)(nil), "api.SvcConfigDiscoveryResponse.UpdatedEntry")
	proto.RegisterType((*SvcEndpointDiscoveryRequest)(nil), "api.SvcEndpointDiscoveryRequest")
	proto.RegisterType((*SvcEndpointDiscoveryResponse)(nil), "api.SvcEndpointDiscoveryResponse")
}

func init() { proto.RegisterFile("api/discovery.proto", fileDescriptor_5ea7b57a526124c9) }

var fileDescriptor_5ea7b57a526124c9 = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xed, 0x24, 0xea, 0xd7, 0xf6, 0x7e, 0x48, 0xa4, 0x93, 0x56, 0x24, 0x6e, 0x65, 0x82, 0x25,
	0xa0, 0xa2, 0xc5, 0xae, 0xc2, 0x06, 0xb1, 0xa4, 0x04, 0x09, 0x21, 0x58, 0xd8, 0xea, 0x02, 0x36,
	0xd1, 0x64, 0x3c, 0x84, 0x81, 0xda, 0x63, 0x3c, 0xf6, 0x88, 0xac, 0x10, 0x4f, 0xc0, 0x8a, 0x77,
	0x60, 0xcb, 0x5b, 0xb0, 0xe4, 0x11, 0x5a, 0xaf, 0x58, 0xf6, 0x11, 0x90, 0x3d, 0x1e, 0xa7, 0x94,
	0x04, 0x96, 0xac, 0x3c, 0xe3, 0x73, 0xee, 0xb9, 0x7f, 0x47, 0x03, 0x5d, 0x92, 0x70, 0x2f, 0xe4,
	0x92, 0x0a, 0xc5, 0xd2, 0x99, 0x9b, 0xa4, 0x22, 0x13, 0xb8, 0x4d, 0x12, 0x6e, 0x6d, 0x4d, 0xc5,
	0x54, 0x54, 0x77, 0xaf, 0x3c, 0x69, 0xc8, 0xba, 0xa6, 0xc8, 0x09, 0x0f, 0x49, 0xc6, 0x3c, 0x73,
	0xa8, 0x81, 0x6d, 0x2a, 0xa2, 0x48, 0xc4, 0x1e, 0x8f, 0x65, 0x46, 0x62, 0x6a, 0x7e, 0xef, 0x52,
	0x11, 0xbf, 0xe2, 0x53, 0x4f, 0xb2, 0x54, 0x71, 0xca, 0xcc, 0xb7, 0x46, 0x77, 0x2e, 0xa1, 0xfa,
	0xaa, 0x41, 0xe7, 0x08, 0xba, 0x81, 0xa2, 0x8f, 0x4c, 0x6d, 0x3e, 0x7b, 0x97, 0x33, 0x99, 0xe1,
	0x03, 0x58, 0x37, 0x39, 0x7a, 0x68, 0x80, 0xf6, 0xfe, 0x1f, 0x76, 0x5c, 0x9d, 0xdb, 0x7d, 0x52,
	0xff, 0xf7, 0x1b, 0x86, 0xf3, 0x06, 0xb6, 0x7e, 0x15, 0x91, 0x89, 0x88, 0x25, 0xc3, 0xb7, 0x60,
	0x95, 0x84, 0x21, 0x0b, 0x7b, 0x68, 0xd0, 0xae, 0x24, 0x4c, 0x61, 0x81, 0xfe, 0xfa, 0x1a, 0xc6,
	0x77, 0x60, 0x2d, 0x65, 0x91, 0x50, 0x2c, 0xec, 0xb5, 0x96, 0x30, 0x0d, 0xc1, 0xf9, 0x00, 0xfd,
	0x40, 0xd1, 0xa3, 0xaa, 0x87, 0xdf, 0xca, 0x76, 0xa1, 0x2b, 0x15, 0x1d, 0xc7, 0x24, 0x62, 0x72,
	0x2c, 0xf3, 0x89, 0xa4, 0x29, 0x9f, 0xb0, 0x2a, 0xfd, 0x86, 0xbf, 0x29, 0x15, 0x7d, 0x5e, 0x22,
	0x81, 0x01, 0xf0, 0x10, 0xb6, 0xe7, 0xfc, 0x3c, 0x9e, 0x47, 0xb4, 0xaa, 0x88, 0xae, 0x89, 0x38,
	0x9e, 0x43, 0xce, 0x57, 0x04, 0xd6, 0xa2, 0x0a, 0xea, 0x9e, 0x1f, 0xc3, 0x5a, 0x9e, 0x94, 0x2b,
	0x33, 0x5d, 0x1f, 0xb8, 0x24, 0xe1, 0xee, 0xf2, 0x08, 0xf7, 0x58, 0xd3, 0x47, 0x71, 0x96, 0xce,
	0x7c, 0x13, 0x6c, 0x3d, 0x85, 0x2b, 0x17, 0x01, 0xdc, 0x81, 0xf6, 0x5b, 0x36, 0xab, 0x96, 0xb1,
	0xe1, 0x97, 0x47, 0x7c, 0x13, 0x56, 0x15, 0x39, 0xc9, 0xcb, 0x62, 0xcb, 0x05, 0x5d, 0x6d, 0x66,
	0xa6, 0x13, 0xf9, 0x1a, 0x7d, 0xd0, 0xba, 0x8f, 0x9c, 0x8f, 0x08, 0x76, 0x02, 0x45, 0x47, 0x71,
	0x98, 0x08, 0x1e, 0x67, 0xff, 0x64, 0x6e, 0x9f, 0x10, 0xec, 0x2e, 0xae, 0xa1, 0x9e, 0x5c, 0x1f,
	0xd6, 0x8d, 0x68, 0xdd, 0xe6, 0x5a, 0xad, 0x83, 0x6f, 0x1b, 0x23, 0x69, 0x7b, 0x6c, 0x36, 0xad,
	0x1a, 0x35, 0xe3, 0xa4, 0xfd, 0xb9, 0x93, 0xda, 0xcb, 0xa8, 0x86, 0x31, 0xfc, 0xdc, 0x82, 0x4e,
	0x53, 0x46, 0x6d, 0x34, 0x3c, 0x02, 0x08, 0xb2, 0x94, 0x91, 0x28, 0x50, 0x54, 0xe2, 0x9e, 0x59,
	0xde, 0xe5, 0x91, 0x59, 0xfd, 0x05, 0x88, 0x6e, 0xc4, 0x59, 0x39, 0x44, 0xf8, 0x05, 0x74, 0x1a,
	0x19, 0xbd, 0x0f, 0x89, 0xed, 0xa5, 0x4e, 0xd0, 0x92, 0xd7, 0xff, 0xe2, 0x14, 0x67, 0x65, 0x0f,
	0x1d, 0x22, 0x3c, 0x06, 0xdc, 0x48, 0x9b, 0xa6, 0x24, 0x1e, 0x98, 0xe0, 0x65, 0x4b, 0xb6, 0x6e,
	0xfc, 0x81, 0x71, 0x31, 0xc1, 0xc3, 0x67, 0xa7, 0x67, 0x36, 0x3a, 0x3f, 0xb3, 0xd1, 0x97, 0xc2,
	0x46, 0xdf, 0x0a, 0x1b, 0x7d, 0x2f, 0x6c, 0x74, 0x5a, 0xd8, 0xe8, 0x47, 0x61, 0xa3, 0xf3, 0xc2,
	0x5e, 0x79, 0xb9, 0x3f, 0xe5, 0xd9, 0xeb, 0x7c, 0x52, 0x3e, 0x09, 0x9e, 0x24, 0x11, 0x49, 0x79,
	0x46, 0xe2, 0xbb, 0x49, 0x2a, 0xde, 0xcf, 0xe6, 0x77, 0x2f, 0x99, 0x78, 0x24, 0xe1, 0x93, 0xff,
	0xaa, 0x97, 0xe6, 0xde, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0xc0, 0x00, 0x26, 0x06, 0x05,
	0x00, 0x00,
}

func (this *SvcDiscoveryRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SvcDiscoveryRequest)
	if !ok {
		that2, ok := that.(SvcDiscoveryRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SvcDiscoveryRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SvcDiscoveryRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SvcDiscoveryRequest but is not nil && this == nil")
	}
	if !this.Instance.Equal(that1.Instance) {
		return fmt.Errorf("Instance this(%v) Not Equal that(%v)", this.Instance, that1.Instance)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SvcDiscoveryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SvcDiscoveryRequest)
	if !ok {
		that2, ok := that.(SvcDiscoveryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Instance.Equal(that1.Instance) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SvcDiscoveryResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SvcDiscoveryResponse)
	if !ok {
		that2, ok := that.(SvcDiscoveryResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SvcDiscoveryResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SvcDiscoveryResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SvcDiscoveryResponse but is not nil && this == nil")
	}
	if len(this.Added) != len(that1.Added) {
		return fmt.Errorf("Added this(%v) Not Equal that(%v)", len(this.Added), len(that1.Added))
	}
	for i := range this.Added {
		if !this.Added[i].Equal(that1.Added[i]) {
			return fmt.Errorf("Added this[%v](%v) Not Equal that[%v](%v)", i, this.Added[i], i, that1.Added[i])
		}
	}
	if len(this.Removed) != len(that1.Removed) {
		return fmt.Errorf("Removed this(%v) Not Equal that(%v)", len(this.Removed), len(that1.Removed))
	}
	for i := range this.Removed {
		if !this.Removed[i].Equal(that1.Removed[i]) {
			return fmt.Errorf("Removed this[%v](%v) Not Equal that[%v](%v)", i, this.Removed[i], i, that1.Removed[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SvcDiscoveryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SvcDiscoveryResponse)
	if !ok {
		that2, ok := that.(SvcDiscoveryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Added) != len(that1.Added) {
		return false
	}
	for i := range this.Added {
		if !this.Added[i].Equal(that1.Added[i]) {
			return false
		}
	}
	if len(this.Removed) != len(that1.Removed) {
		return false
	}
	for i := range this.Removed {
		if !this.Removed[i].Equal(that1.Removed[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SvcConfigDiscoveryRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SvcConfigDiscoveryRequest)
	if !ok {
		that2, ok := that.(SvcConfigDiscoveryRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SvcConfigDiscoveryRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SvcConfigDiscoveryRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SvcConfigDiscoveryRequest but is not nil && this == nil")
	}
	if len(this.SvcNamesSubscribe) != len(that1.SvcNamesSubscribe) {
		return fmt.Errorf("SvcNamesSubscribe this(%v) Not Equal that(%v)", len(this.SvcNamesSubscribe), len(that1.SvcNamesSubscribe))
	}
	for i := range this.SvcNamesSubscribe {
		if this.SvcNamesSubscribe[i] != that1.SvcNamesSubscribe[i] {
			return fmt.Errorf("SvcNamesSubscribe this[%v](%v) Not Equal that[%v](%v)", i, this.SvcNamesSubscribe[i], i, that1.SvcNamesSubscribe[i])
		}
	}
	if len(this.SvcNamesUnsubscribe) != len(that1.SvcNamesUnsubscribe) {
		return fmt.Errorf("SvcNamesUnsubscribe this(%v) Not Equal that(%v)", len(this.SvcNamesUnsubscribe), len(that1.SvcNamesUnsubscribe))
	}
	for i := range this.SvcNamesUnsubscribe {
		if this.SvcNamesUnsubscribe[i] != that1.SvcNamesUnsubscribe[i] {
			return fmt.Errorf("SvcNamesUnsubscribe this[%v](%v) Not Equal that[%v](%v)", i, this.SvcNamesUnsubscribe[i], i, that1.SvcNamesUnsubscribe[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SvcConfigDiscoveryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SvcConfigDiscoveryRequest)
	if !ok {
		that2, ok := that.(SvcConfigDiscoveryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SvcNamesSubscribe) != len(that1.SvcNamesSubscribe) {
		return false
	}
	for i := range this.SvcNamesSubscribe {
		if this.SvcNamesSubscribe[i] != that1.SvcNamesSubscribe[i] {
			return false
		}
	}
	if len(this.SvcNamesUnsubscribe) != len(that1.SvcNamesUnsubscribe) {
		return false
	}
	for i := range this.SvcNamesUnsubscribe {
		if this.SvcNamesUnsubscribe[i] != that1.SvcNamesUnsubscribe[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SvcConfigDiscoveryResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SvcConfigDiscoveryResponse)
	if !ok {
		that2, ok := that.(SvcConfigDiscoveryResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SvcConfigDiscoveryResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SvcConfigDiscoveryResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SvcConfigDiscoveryResponse but is not nil && this == nil")
	}
	if len(this.Updated) != len(that1.Updated) {
		return fmt.Errorf("Updated this(%v) Not Equal that(%v)", len(this.Updated), len(that1.Updated))
	}
	for i := range this.Updated {
		if !this.Updated[i].Equal(that1.Updated[i]) {
			return fmt.Errorf("Updated this[%v](%v) Not Equal that[%v](%v)", i, this.Updated[i], i, that1.Updated[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SvcConfigDiscoveryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SvcConfigDiscoveryResponse)
	if !ok {
		that2, ok := that.(SvcConfigDiscoveryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Updated) != len(that1.Updated) {
		return false
	}
	for i := range this.Updated {
		if !this.Updated[i].Equal(that1.Updated[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SvcEndpointDiscoveryRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SvcEndpointDiscoveryRequest)
	if !ok {
		that2, ok := that.(SvcEndpointDiscoveryRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SvcEndpointDiscoveryRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SvcEndpointDiscoveryRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SvcEndpointDiscoveryRequest but is not nil && this == nil")
	}
	if len(this.SvcNamesSubscribe) != len(that1.SvcNamesSubscribe) {
		return fmt.Errorf("SvcNamesSubscribe this(%v) Not Equal that(%v)", len(this.SvcNamesSubscribe), len(that1.SvcNamesSubscribe))
	}
	for i := range this.SvcNamesSubscribe {
		if this.SvcNamesSubscribe[i] != that1.SvcNamesSubscribe[i] {
			return fmt.Errorf("SvcNamesSubscribe this[%v](%v) Not Equal that[%v](%v)", i, this.SvcNamesSubscribe[i], i, that1.SvcNamesSubscribe[i])
		}
	}
	if len(this.SvcNamesUnsubscribe) != len(that1.SvcNamesUnsubscribe) {
		return fmt.Errorf("SvcNamesUnsubscribe this(%v) Not Equal that(%v)", len(this.SvcNamesUnsubscribe), len(that1.SvcNamesUnsubscribe))
	}
	for i := range this.SvcNamesUnsubscribe {
		if this.SvcNamesUnsubscribe[i] != that1.SvcNamesUnsubscribe[i] {
			return fmt.Errorf("SvcNamesUnsubscribe this[%v](%v) Not Equal that[%v](%v)", i, this.SvcNamesUnsubscribe[i], i, that1.SvcNamesUnsubscribe[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SvcEndpointDiscoveryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SvcEndpointDiscoveryRequest)
	if !ok {
		that2, ok := that.(SvcEndpointDiscoveryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SvcNamesSubscribe) != len(that1.SvcNamesSubscribe) {
		return false
	}
	for i := range this.SvcNamesSubscribe {
		if this.SvcNamesSubscribe[i] != that1.SvcNamesSubscribe[i] {
			return false
		}
	}
	if len(this.SvcNamesUnsubscribe) != len(that1.SvcNamesUnsubscribe) {
		return false
	}
	for i := range this.SvcNamesUnsubscribe {
		if this.SvcNamesUnsubscribe[i] != that1.SvcNamesUnsubscribe[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SvcEndpointDiscoveryResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SvcEndpointDiscoveryResponse)
	if !ok {
		that2, ok := that.(SvcEndpointDiscoveryResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SvcEndpointDiscoveryResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SvcEndpointDiscoveryResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SvcEndpointDiscoveryResponse but is not nil && this == nil")
	}
	if this.SvcName != that1.SvcName {
		return fmt.Errorf("SvcName this(%v) Not Equal that(%v)", this.SvcName, that1.SvcName)
	}
	if len(this.Added) != len(that1.Added) {
		return fmt.Errorf("Added this(%v) Not Equal that(%v)", len(this.Added), len(that1.Added))
	}
	for i := range this.Added {
		if !this.Added[i].Equal(that1.Added[i]) {
			return fmt.Errorf("Added this[%v](%v) Not Equal that[%v](%v)", i, this.Added[i], i, that1.Added[i])
		}
	}
	if len(this.Removed) != len(that1.Removed) {
		return fmt.Errorf("Removed this(%v) Not Equal that(%v)", len(this.Removed), len(that1.Removed))
	}
	for i := range this.Removed {
		if !this.Removed[i].Equal(that1.Removed[i]) {
			return fmt.Errorf("Removed this[%v](%v) Not Equal that[%v](%v)", i, this.Removed[i], i, that1.Removed[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SvcEndpointDiscoveryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SvcEndpointDiscoveryResponse)
	if !ok {
		that2, ok := that.(SvcEndpointDiscoveryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SvcName != that1.SvcName {
		return false
	}
	if len(this.Added) != len(that1.Added) {
		return false
	}
	for i := range this.Added {
		if !this.Added[i].Equal(that1.Added[i]) {
			return false
		}
	}
	if len(this.Removed) != len(that1.Removed) {
		return false
	}
	for i := range this.Removed {
		if !this.Removed[i].Equal(that1.Removed[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SvcDiscoveryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.SvcDiscoveryRequest{")
	if this.Instance != nil {
		s = append(s, "Instance: "+fmt.Sprintf("%#v", this.Instance)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SvcDiscoveryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.SvcDiscoveryResponse{")
	if this.Added != nil {
		s = append(s, "Added: "+fmt.Sprintf("%#v", this.Added)+",\n")
	}
	if this.Removed != nil {
		s = append(s, "Removed: "+fmt.Sprintf("%#v", this.Removed)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SvcConfigDiscoveryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.SvcConfigDiscoveryRequest{")
	s = append(s, "SvcNamesSubscribe: "+fmt.Sprintf("%#v", this.SvcNamesSubscribe)+",\n")
	s = append(s, "SvcNamesUnsubscribe: "+fmt.Sprintf("%#v", this.SvcNamesUnsubscribe)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SvcConfigDiscoveryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.SvcConfigDiscoveryResponse{")
	keysForUpdated := make([]string, 0, len(this.Updated))
	for k, _ := range this.Updated {
		keysForUpdated = append(keysForUpdated, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForUpdated)
	mapStringForUpdated := "map[string]*service.Config{"
	for _, k := range keysForUpdated {
		mapStringForUpdated += fmt.Sprintf("%#v: %#v,", k, this.Updated[k])
	}
	mapStringForUpdated += "}"
	if this.Updated != nil {
		s = append(s, "Updated: "+mapStringForUpdated+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SvcEndpointDiscoveryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.SvcEndpointDiscoveryRequest{")
	s = append(s, "SvcNamesSubscribe: "+fmt.Sprintf("%#v", this.SvcNamesSubscribe)+",\n")
	s = append(s, "SvcNamesUnsubscribe: "+fmt.Sprintf("%#v", this.SvcNamesUnsubscribe)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SvcEndpointDiscoveryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.SvcEndpointDiscoveryResponse{")
	s = append(s, "SvcName: "+fmt.Sprintf("%#v", this.SvcName)+",\n")
	if this.Added != nil {
		s = append(s, "Added: "+fmt.Sprintf("%#v", this.Added)+",\n")
	}
	if this.Removed != nil {
		s = append(s, "Removed: "+fmt.Sprintf("%#v", this.Removed)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDiscovery(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DiscoveryServiceClient is the client API for DiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiscoveryServiceClient interface {
	StreamSvcs(ctx context.Context, in *SvcDiscoveryRequest, opts ...grpc.CallOption) (DiscoveryService_StreamSvcsClient, error)
	StreamSvcConfigs(ctx context.Context, opts ...grpc.CallOption) (DiscoveryService_StreamSvcConfigsClient, error)
	StreamSvcEndpoints(ctx context.Context, opts ...grpc.CallOption) (DiscoveryService_StreamSvcEndpointsClient, error)
}

type discoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryServiceClient(cc *grpc.ClientConn) DiscoveryServiceClient {
	return &discoveryServiceClient{cc}
}

func (c *discoveryServiceClient) StreamSvcs(ctx context.Context, in *SvcDiscoveryRequest, opts ...grpc.CallOption) (DiscoveryService_StreamSvcsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DiscoveryService_serviceDesc.Streams[0], "/api.DiscoveryService/StreamSvcs", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoveryServiceStreamSvcsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiscoveryService_StreamSvcsClient interface {
	Recv() (*SvcDiscoveryResponse, error)
	grpc.ClientStream
}

type discoveryServiceStreamSvcsClient struct {
	grpc.ClientStream
}

func (x *discoveryServiceStreamSvcsClient) Recv() (*SvcDiscoveryResponse, error) {
	m := new(SvcDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *discoveryServiceClient) StreamSvcConfigs(ctx context.Context, opts ...grpc.CallOption) (DiscoveryService_StreamSvcConfigsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DiscoveryService_serviceDesc.Streams[1], "/api.DiscoveryService/StreamSvcConfigs", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoveryServiceStreamSvcConfigsClient{stream}
	return x, nil
}

type DiscoveryService_StreamSvcConfigsClient interface {
	Send(*SvcConfigDiscoveryRequest) error
	Recv() (*SvcConfigDiscoveryResponse, error)
	grpc.ClientStream
}

type discoveryServiceStreamSvcConfigsClient struct {
	grpc.ClientStream
}

func (x *discoveryServiceStreamSvcConfigsClient) Send(m *SvcConfigDiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *discoveryServiceStreamSvcConfigsClient) Recv() (*SvcConfigDiscoveryResponse, error) {
	m := new(SvcConfigDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *discoveryServiceClient) StreamSvcEndpoints(ctx context.Context, opts ...grpc.CallOption) (DiscoveryService_StreamSvcEndpointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DiscoveryService_serviceDesc.Streams[2], "/api.DiscoveryService/StreamSvcEndpoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoveryServiceStreamSvcEndpointsClient{stream}
	return x, nil
}

type DiscoveryService_StreamSvcEndpointsClient interface {
	Send(*SvcEndpointDiscoveryRequest) error
	Recv() (*SvcEndpointDiscoveryResponse, error)
	grpc.ClientStream
}

type discoveryServiceStreamSvcEndpointsClient struct {
	grpc.ClientStream
}

func (x *discoveryServiceStreamSvcEndpointsClient) Send(m *SvcEndpointDiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *discoveryServiceStreamSvcEndpointsClient) Recv() (*SvcEndpointDiscoveryResponse, error) {
	m := new(SvcEndpointDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DiscoveryServiceServer is the server API for DiscoveryService service.
type DiscoveryServiceServer interface {
	StreamSvcs(*SvcDiscoveryRequest, DiscoveryService_StreamSvcsServer) error
	StreamSvcConfigs(DiscoveryService_StreamSvcConfigsServer) error
	StreamSvcEndpoints(DiscoveryService_StreamSvcEndpointsServer) error
}

// UnimplementedDiscoveryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDiscoveryServiceServer struct {
}

func (*UnimplementedDiscoveryServiceServer) StreamSvcs(req *SvcDiscoveryRequest, srv DiscoveryService_StreamSvcsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSvcs not implemented")
}
func (*UnimplementedDiscoveryServiceServer) StreamSvcConfigs(srv DiscoveryService_StreamSvcConfigsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSvcConfigs not implemented")
}
func (*UnimplementedDiscoveryServiceServer) StreamSvcEndpoints(srv DiscoveryService_StreamSvcEndpointsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSvcEndpoints not implemented")
}

func RegisterDiscoveryServiceServer(s *grpc.Server, srv DiscoveryServiceServer) {
	s.RegisterService(&_DiscoveryService_serviceDesc, srv)
}

func _DiscoveryService_StreamSvcs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SvcDiscoveryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiscoveryServiceServer).StreamSvcs(m, &discoveryServiceStreamSvcsServer{stream})
}

type DiscoveryService_StreamSvcsServer interface {
	Send(*SvcDiscoveryResponse) error
	grpc.ServerStream
}

type discoveryServiceStreamSvcsServer struct {
	grpc.ServerStream
}

func (x *discoveryServiceStreamSvcsServer) Send(m *SvcDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DiscoveryService_StreamSvcConfigs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DiscoveryServiceServer).StreamSvcConfigs(&discoveryServiceStreamSvcConfigsServer{stream})
}

type DiscoveryService_StreamSvcConfigsServer interface {
	Send(*SvcConfigDiscoveryResponse) error
	Recv() (*SvcConfigDiscoveryRequest, error)
	grpc.ServerStream
}

type discoveryServiceStreamSvcConfigsServer struct {
	grpc.ServerStream
}

func (x *discoveryServiceStreamSvcConfigsServer) Send(m *SvcConfigDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *discoveryServiceStreamSvcConfigsServer) Recv() (*SvcConfigDiscoveryRequest, error) {
	m := new(SvcConfigDiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DiscoveryService_StreamSvcEndpoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DiscoveryServiceServer).StreamSvcEndpoints(&discoveryServiceStreamSvcEndpointsServer{stream})
}

type DiscoveryService_StreamSvcEndpointsServer interface {
	Send(*SvcEndpointDiscoveryResponse) error
	Recv() (*SvcEndpointDiscoveryRequest, error)
	grpc.ServerStream
}

type discoveryServiceStreamSvcEndpointsServer struct {
	grpc.ServerStream
}

func (x *discoveryServiceStreamSvcEndpointsServer) Send(m *SvcEndpointDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *discoveryServiceStreamSvcEndpointsServer) Recv() (*SvcEndpointDiscoveryRequest, error) {
	m := new(SvcEndpointDiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DiscoveryService",
	HandlerType: (*DiscoveryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSvcs",
			Handler:       _DiscoveryService_StreamSvcs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamSvcConfigs",
			Handler:       _DiscoveryService_StreamSvcConfigs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamSvcEndpoints",
			Handler:       _DiscoveryService_StreamSvcEndpoints_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/discovery.proto",
}

func (m *SvcDiscoveryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcDiscoveryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcDiscoveryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Instance != nil {
		{
			size, err := m.Instance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDiscovery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SvcDiscoveryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcDiscoveryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcDiscoveryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Removed) > 0 {
		for iNdEx := len(m.Removed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Removed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDiscovery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Added) > 0 {
		for iNdEx := len(m.Added) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Added[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDiscovery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SvcConfigDiscoveryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcConfigDiscoveryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcConfigDiscoveryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SvcNamesUnsubscribe) > 0 {
		for iNdEx := len(m.SvcNamesUnsubscribe) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SvcNamesUnsubscribe[iNdEx])
			copy(dAtA[i:], m.SvcNamesUnsubscribe[iNdEx])
			i = encodeVarintDiscovery(dAtA, i, uint64(len(m.SvcNamesUnsubscribe[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SvcNamesSubscribe) > 0 {
		for iNdEx := len(m.SvcNamesSubscribe) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SvcNamesSubscribe[iNdEx])
			copy(dAtA[i:], m.SvcNamesSubscribe[iNdEx])
			i = encodeVarintDiscovery(dAtA, i, uint64(len(m.SvcNamesSubscribe[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SvcConfigDiscoveryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcConfigDiscoveryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcConfigDiscoveryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Updated) > 0 {
		for k := range m.Updated {
			v := m.Updated[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDiscovery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDiscovery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDiscovery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SvcEndpointDiscoveryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcEndpointDiscoveryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcEndpointDiscoveryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SvcNamesUnsubscribe) > 0 {
		for iNdEx := len(m.SvcNamesUnsubscribe) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SvcNamesUnsubscribe[iNdEx])
			copy(dAtA[i:], m.SvcNamesUnsubscribe[iNdEx])
			i = encodeVarintDiscovery(dAtA, i, uint64(len(m.SvcNamesUnsubscribe[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SvcNamesSubscribe) > 0 {
		for iNdEx := len(m.SvcNamesSubscribe) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SvcNamesSubscribe[iNdEx])
			copy(dAtA[i:], m.SvcNamesSubscribe[iNdEx])
			i = encodeVarintDiscovery(dAtA, i, uint64(len(m.SvcNamesSubscribe[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SvcEndpointDiscoveryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcEndpointDiscoveryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcEndpointDiscoveryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Removed) > 0 {
		for iNdEx := len(m.Removed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Removed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDiscovery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Added) > 0 {
		for iNdEx := len(m.Added) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Added[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDiscovery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SvcName) > 0 {
		i -= len(m.SvcName)
		copy(dAtA[i:], m.SvcName)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.SvcName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDiscovery(dAtA []byte, offset int, v uint64) int {
	offset -= sovDiscovery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SvcDiscoveryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Instance != nil {
		l = m.Instance.Size()
		n += 1 + l + sovDiscovery(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcDiscoveryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Added) > 0 {
		for _, e := range m.Added {
			l = e.Size()
			n += 1 + l + sovDiscovery(uint64(l))
		}
	}
	if len(m.Removed) > 0 {
		for _, e := range m.Removed {
			l = e.Size()
			n += 1 + l + sovDiscovery(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcConfigDiscoveryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SvcNamesSubscribe) > 0 {
		for _, s := range m.SvcNamesSubscribe {
			l = len(s)
			n += 1 + l + sovDiscovery(uint64(l))
		}
	}
	if len(m.SvcNamesUnsubscribe) > 0 {
		for _, s := range m.SvcNamesUnsubscribe {
			l = len(s)
			n += 1 + l + sovDiscovery(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcConfigDiscoveryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Updated) > 0 {
		for k, v := range m.Updated {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDiscovery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDiscovery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDiscovery(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcEndpointDiscoveryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SvcNamesSubscribe) > 0 {
		for _, s := range m.SvcNamesSubscribe {
			l = len(s)
			n += 1 + l + sovDiscovery(uint64(l))
		}
	}
	if len(m.SvcNamesUnsubscribe) > 0 {
		for _, s := range m.SvcNamesUnsubscribe {
			l = len(s)
			n += 1 + l + sovDiscovery(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcEndpointDiscoveryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SvcName)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	if len(m.Added) > 0 {
		for _, e := range m.Added {
			l = e.Size()
			n += 1 + l + sovDiscovery(uint64(l))
		}
	}
	if len(m.Removed) > 0 {
		for _, e := range m.Removed {
			l = e.Size()
			n += 1 + l + sovDiscovery(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDiscovery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDiscovery(x uint64) (n int) {
	return sovDiscovery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SvcDiscoveryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcDiscoveryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcDiscoveryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Instance == nil {
				m.Instance = &common.Instance{}
			}
			if err := m.Instance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcDiscoveryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcDiscoveryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcDiscoveryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Added", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Added = append(m.Added, &service.Service{})
			if err := m.Added[len(m.Added)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Removed = append(m.Removed, &service.Service{})
			if err := m.Removed[len(m.Removed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcConfigDiscoveryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcConfigDiscoveryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcConfigDiscoveryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcNamesSubscribe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvcNamesSubscribe = append(m.SvcNamesSubscribe, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcNamesUnsubscribe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvcNamesUnsubscribe = append(m.SvcNamesUnsubscribe, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcConfigDiscoveryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcConfigDiscoveryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcConfigDiscoveryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updated == nil {
				m.Updated = make(map[string]*service.Config)
			}
			var mapkey string
			var mapvalue *service.Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDiscovery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDiscovery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDiscovery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDiscovery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDiscovery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDiscovery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDiscovery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &service.Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDiscovery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDiscovery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Updated[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcEndpointDiscoveryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcEndpointDiscoveryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcEndpointDiscoveryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcNamesSubscribe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvcNamesSubscribe = append(m.SvcNamesSubscribe, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcNamesUnsubscribe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvcNamesUnsubscribe = append(m.SvcNamesUnsubscribe, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcEndpointDiscoveryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcEndpointDiscoveryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcEndpointDiscoveryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Added", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Added = append(m.Added, &service.Endpoint{})
			if err := m.Added[len(m.Added)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Removed = append(m.Removed, &service.Endpoint{})
			if err := m.Removed[len(m.Removed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDiscovery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDiscovery
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDiscovery
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDiscovery
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDiscovery(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDiscovery
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDiscovery = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiscovery   = fmt.Errorf("proto: integer overflow")
)

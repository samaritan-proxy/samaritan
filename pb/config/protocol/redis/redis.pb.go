// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: config/protocol/redis/redis.proto

package redis

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Strategy of a read only command.
type ReadStrategy int32

const (
	// Read from master nodes.
	ReadStrategy_MASTER ReadStrategy = 0
	// Read from replica nodes.
	ReadStrategy_REPLICA ReadStrategy = 1
	// Read from all nodes.
	ReadStrategy_BOTH ReadStrategy = 2
)

var ReadStrategy_name = map[int32]string{
	0: "MASTER",
	1: "REPLICA",
	2: "BOTH",
}

var ReadStrategy_value = map[string]int32{
	"MASTER":  0,
	"REPLICA": 1,
	"BOTH":    2,
}

func (x ReadStrategy) String() string {
	return proto.EnumName(ReadStrategy_name, int32(x))
}

func (ReadStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a6dea29d5b32a1c9, []int{0}
}

type Compression_Algorithm int32

const (
	Compression_SNAPPY Compression_Algorithm = 0
)

var Compression_Algorithm_name = map[int32]string{
	0: "SNAPPY",
}

var Compression_Algorithm_value = map[string]int32{
	"SNAPPY": 0,
}

func (x Compression_Algorithm) String() string {
	return proto.EnumName(Compression_Algorithm_name, int32(x))
}

func (Compression_Algorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a6dea29d5b32a1c9, []int{0, 0}
}

// Configuration of compression.
type Compression struct {
	// Switch of compress, default is off.
	// NOTE: Uncompress will always work.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Compression algorithm used in compression filter.
	Algorithm Compression_Algorithm `protobuf:"varint,2,opt,name=algorithm,proto3,enum=redis.Compression_Algorithm" json:"algorithm,omitempty"`
	// Value will be ignored when byte length of value is less than the
	// threshold, must be greater than 0.
	Threshold            uint32   `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Compression) Reset()         { *m = Compression{} }
func (m *Compression) String() string { return proto.CompactTextString(m) }
func (*Compression) ProtoMessage()    {}
func (*Compression) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6dea29d5b32a1c9, []int{0}
}
func (m *Compression) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Compression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Compression.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Compression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Compression.Merge(m, src)
}
func (m *Compression) XXX_Size() int {
	return m.Size()
}
func (m *Compression) XXX_DiscardUnknown() {
	xxx_messageInfo_Compression.DiscardUnknown(m)
}

var xxx_messageInfo_Compression proto.InternalMessageInfo

func (m *Compression) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *Compression) GetAlgorithm() Compression_Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return Compression_SNAPPY
}

func (m *Compression) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func init() {
	proto.RegisterEnum("redis.ReadStrategy", ReadStrategy_name, ReadStrategy_value)
	proto.RegisterEnum("redis.Compression_Algorithm", Compression_Algorithm_name, Compression_Algorithm_value)
	proto.RegisterType((*Compression)(nil), "redis.Compression")
}

func init() { proto.RegisterFile("config/protocol/redis/redis.proto", fileDescriptor_a6dea29d5b32a1c9) }

var fileDescriptor_a6dea29d5b32a1c9 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0xd7, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x2f, 0x4a, 0x4d, 0xc9,
	0x2c, 0x86, 0x90, 0x7a, 0x60, 0x41, 0x21, 0x56, 0x30, 0x47, 0x4a, 0x24, 0x3d, 0x3f, 0x3d, 0x1f,
	0x2c, 0xa2, 0x0f, 0x62, 0x41, 0x24, 0xa5, 0xc4, 0xcb, 0x12, 0x73, 0x32, 0x53, 0x12, 0x4b, 0x52,
	0xf5, 0x61, 0x0c, 0x88, 0x84, 0xd2, 0x5e, 0x46, 0x2e, 0x6e, 0xe7, 0xfc, 0xdc, 0x82, 0xa2, 0xd4,
	0xe2, 0xe2, 0xcc, 0xfc, 0x3c, 0x21, 0x31, 0x2e, 0xb6, 0xd4, 0xbc, 0xc4, 0xa4, 0x9c, 0x54, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0x8e, 0x20, 0x28, 0x4f, 0xc8, 0x93, 0x8b, 0x33, 0x31, 0x27, 0x3d, 0xbf,
	0x28, 0xb3, 0x24, 0x23, 0x57, 0x82, 0x49, 0x81, 0x51, 0x83, 0xcf, 0x48, 0x46, 0x0f, 0x62, 0x3d,
	0x92, 0x76, 0x3d, 0x47, 0x98, 0x1a, 0x27, 0xde, 0x5d, 0x2f, 0x0f, 0x30, 0x73, 0x34, 0x31, 0xb2,
	0x4a, 0x30, 0x48, 0xfc, 0x67, 0x0c, 0x42, 0xe8, 0x16, 0x52, 0xe7, 0xe2, 0x2c, 0xc9, 0x28, 0x4a,
	0x2d, 0xce, 0xc8, 0xcf, 0x49, 0x91, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x75, 0xe2, 0x04, 0x29, 0x66,
	0xd1, 0x62, 0x52, 0x60, 0x08, 0x42, 0xc8, 0x29, 0x29, 0x71, 0x71, 0xc2, 0xcd, 0x13, 0xe2, 0xe2,
	0x62, 0x0b, 0xf6, 0x73, 0x0c, 0x08, 0x88, 0x14, 0x60, 0x50, 0xe2, 0xe4, 0x68, 0x60, 0x12, 0xf8,
	0xff, 0xff, 0xff, 0x7f, 0x76, 0x2d, 0x43, 0x2e, 0x9e, 0xa0, 0xd4, 0xc4, 0x94, 0xe0, 0x92, 0xa2,
	0xc4, 0x92, 0xd4, 0xf4, 0x4a, 0x90, 0x32, 0x5f, 0xc7, 0xe0, 0x10, 0xd7, 0x20, 0x01, 0x06, 0x21,
	0x6e, 0x2e, 0xf6, 0x20, 0xd7, 0x00, 0x1f, 0x4f, 0x67, 0x47, 0x01, 0x46, 0x21, 0x0e, 0x2e, 0x16,
	0x27, 0xff, 0x10, 0x0f, 0x01, 0x26, 0xa7, 0xf8, 0x07, 0x0f, 0xe5, 0x18, 0x3f, 0x3c, 0x94, 0x63,
	0x5c, 0xf1, 0x48, 0x8e, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92,
	0x63, 0x7c, 0xf1, 0x48, 0x8e, 0xf1, 0xc3, 0x23, 0x39, 0x86, 0x28, 0xdb, 0xf4, 0xcc, 0x92, 0x8c,
	0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xe2, 0xc4, 0xdc, 0xc4, 0xa2, 0xcc, 0x92, 0xc4, 0x3c,
	0xdd, 0x82, 0xa2, 0xfc, 0x8a, 0x4a, 0x04, 0x5f, 0xbf, 0x20, 0x49, 0x1f, 0x6b, 0xac, 0x24, 0xb1,
	0x81, 0xf9, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0x16, 0x59, 0x78, 0xb5, 0x01, 0x00,
	0x00,
}

func (this *Compression) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Compression)
	if !ok {
		that2, ok := that.(Compression)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Compression")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Compression but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Compression but is not nil && this == nil")
	}
	if this.Enable != that1.Enable {
		return fmt.Errorf("Enable this(%v) Not Equal that(%v)", this.Enable, that1.Enable)
	}
	if this.Algorithm != that1.Algorithm {
		return fmt.Errorf("Algorithm this(%v) Not Equal that(%v)", this.Algorithm, that1.Algorithm)
	}
	if this.Threshold != that1.Threshold {
		return fmt.Errorf("Threshold this(%v) Not Equal that(%v)", this.Threshold, that1.Threshold)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Compression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Compression)
	if !ok {
		that2, ok := that.(Compression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Enable != that1.Enable {
		return false
	}
	if this.Algorithm != that1.Algorithm {
		return false
	}
	if this.Threshold != that1.Threshold {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Compression) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&redis.Compression{")
	s = append(s, "Enable: "+fmt.Sprintf("%#v", this.Enable)+",\n")
	s = append(s, "Algorithm: "+fmt.Sprintf("%#v", this.Algorithm)+",\n")
	s = append(s, "Threshold: "+fmt.Sprintf("%#v", this.Threshold)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRedis(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Compression) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Compression) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Compression) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Threshold != 0 {
		i = encodeVarintRedis(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x18
	}
	if m.Algorithm != 0 {
		i = encodeVarintRedis(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x10
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRedis(dAtA []byte, offset int, v uint64) int {
	offset -= sovRedis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Compression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable {
		n += 2
	}
	if m.Algorithm != 0 {
		n += 1 + sovRedis(uint64(m.Algorithm))
	}
	if m.Threshold != 0 {
		n += 1 + sovRedis(uint64(m.Threshold))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRedis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRedis(x uint64) (n int) {
	return sovRedis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Compression) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Compression: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Compression: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= Compression_Algorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRedis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRedis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRedis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRedis
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRedis
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRedis
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRedis(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRedis
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRedis = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRedis   = fmt.Errorf("proto: integer overflow")
)
